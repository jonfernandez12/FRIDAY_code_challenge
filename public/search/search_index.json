{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"FRIDAY_code_challenge Code challenge for FRIDAY enterprise Requisites pipenv If you are using Visual Studio Code, you need to install Python extension Start bash make start Git Hooks Pre-commit : before each commit the make run-tests command will be executed. Note: If you want to ignore the pre-commit hook, add the flag --no-verify to the commit command. Install dependencies bash make install-deps Add/remove dependency ```bash make install dep={{dependency}} ver={{dependency_version}} # Example: make install dep=requests ver=2.26.0 make install-dev dep={{dependency}} ver={{dependency_version}} # Example: make install-dev dep=requests ver=2.26.0 make uninstall dep={{dependency}} # Example: make uninstall dep=requests ``` Run Runs main application, located in app/main.py . bash make run Run tests Run all tests defined in app/services/tests/test.py. bash make run-tests Format code Orders dependencies with isort and formats the code using the requirementes defined on pyproject.toml. bash make format Check format bash make check-format Check types bash make check-types","title":"Home"},{"location":"index.html#friday_code_challenge","text":"Code challenge for FRIDAY enterprise","title":"FRIDAY_code_challenge"},{"location":"index.html#requisites","text":"pipenv If you are using Visual Studio Code, you need to install Python extension","title":"Requisites"},{"location":"index.html#start","text":"bash make start","title":"Start"},{"location":"index.html#git-hooks","text":"Pre-commit : before each commit the make run-tests command will be executed. Note: If you want to ignore the pre-commit hook, add the flag --no-verify to the commit command.","title":"Git Hooks"},{"location":"index.html#install-dependencies","text":"bash make install-deps","title":"Install dependencies"},{"location":"index.html#addremove-dependency","text":"```bash make install dep={{dependency}} ver={{dependency_version}} # Example: make install dep=requests ver=2.26.0 make install-dev dep={{dependency}} ver={{dependency_version}} # Example: make install-dev dep=requests ver=2.26.0 make uninstall dep={{dependency}} # Example: make uninstall dep=requests ```","title":"Add/remove dependency"},{"location":"index.html#run","text":"Runs main application, located in app/main.py . bash make run","title":"Run"},{"location":"index.html#run-tests","text":"Run all tests defined in app/services/tests/test.py. bash make run-tests","title":"Run tests"},{"location":"index.html#format-code","text":"Orders dependencies with isort and formats the code using the requirementes defined on pyproject.toml. bash make format","title":"Format code"},{"location":"index.html#check-format","text":"bash make check-format","title":"Check format"},{"location":"index.html#check-types","text":"bash make check-types","title":"Check types"},{"location":"statement/index.html","text":"CODE CHALLENGE We kindly ask you to solve the following code challenge as part of our selection process. Addressline An address provider returns addresses only with concatenated street names and numbers. Our own system on the other hand has separate fields for street name and street number. Input: string of address Output: string of street and string of street-number as JSON object Write a simple program that does the task for the most simple cases, e.g. \"Winterallee 3\" -> {\"street\": \"Winterallee\", \"housenumber\": \"3\"} \"Musterstrasse 45\" -> {\"street\": \"Musterstrasse\", \"housenumber\": \"45\"} \"Blaufeldweg 123B\" -> {\"street\": \"Blaufeldweg\", \"housenumber\": \"123B\"} Consider more complicated cases \"Am B\u00e4chle 23\" -> {\"street\": \"Am B\u00e4chle\", \"housenumber\": \"23\"} \"Auf der Vogelwiese 23 b\" -> {\"street\": \"Auf der Vogelwiese\", \"housenumber\": \"23 b\"} Consider other countries (complex cases) \"4, rue de la revolution\" -> {\"street\": \"rue de la revolution\", \"housenumber\": \"4\"} \"200 Broadway Av\" -> {\"street\": \"Broadway Av\", \"housenumber\": \"200\"} \"Calle Aduana, 29\" -> {\"street\": \"Calle Aduana\", \"housenumber\": \"29\"} \"Calle 39 No 1540\" -> {\"street\": \"Calle 39\", \"housenumber\": \"No 1540\"} Your Task: Solve the task using your best programming skills and share the code in a public repository via a public hoster like Github. Contact us via jobs@friday.de. When choosing your approach of implementation, please keep following things in mind: While we will try to evaluate all code that is sent to us, keep in mind that we will feel most comfortable with the tools we know: Python Pandas PySpark SQL We prefer quality over speed. It does not only matter if your solution yields correct results, but we will also take a close look on your overall project structure, the tools used, test coverage, documentation, etc.","title":"Statement"},{"location":"statement/index.html#code-challenge","text":"We kindly ask you to solve the following code challenge as part of our selection process.","title":"CODE CHALLENGE"},{"location":"statement/index.html#addressline","text":"An address provider returns addresses only with concatenated street names and numbers. Our own system on the other hand has separate fields for street name and street number. Input: string of address Output: string of street and string of street-number as JSON object Write a simple program that does the task for the most simple cases, e.g. \"Winterallee 3\" -> {\"street\": \"Winterallee\", \"housenumber\": \"3\"} \"Musterstrasse 45\" -> {\"street\": \"Musterstrasse\", \"housenumber\": \"45\"} \"Blaufeldweg 123B\" -> {\"street\": \"Blaufeldweg\", \"housenumber\": \"123B\"} Consider more complicated cases \"Am B\u00e4chle 23\" -> {\"street\": \"Am B\u00e4chle\", \"housenumber\": \"23\"} \"Auf der Vogelwiese 23 b\" -> {\"street\": \"Auf der Vogelwiese\", \"housenumber\": \"23 b\"} Consider other countries (complex cases) \"4, rue de la revolution\" -> {\"street\": \"rue de la revolution\", \"housenumber\": \"4\"} \"200 Broadway Av\" -> {\"street\": \"Broadway Av\", \"housenumber\": \"200\"} \"Calle Aduana, 29\" -> {\"street\": \"Calle Aduana\", \"housenumber\": \"29\"} \"Calle 39 No 1540\" -> {\"street\": \"Calle 39\", \"housenumber\": \"No 1540\"} Your Task: Solve the task using your best programming skills and share the code in a public repository via a public hoster like Github. Contact us via jobs@friday.de. When choosing your approach of implementation, please keep following things in mind: While we will try to evaluate all code that is sent to us, keep in mind that we will feel most comfortable with the tools we know: Python Pandas PySpark SQL We prefer quality over speed. It does not only matter if your solution yields correct results, but we will also take a close look on your overall project structure, the tools used, test coverage, documentation, etc.","title":"Addressline"},{"location":"technical/index.html","text":"Modus operandi Read statement Free thinking: First challenge looks easy, thinking about split() / strip(). Second challenge also easy, read until a numeric is found. Third challenge looks like it needs another field such as postal code or an IA app to identify the country so as to know how to split streets or maybe an IA that learns how to split streets. Do I need a country, street and number database to cover all cases? Looks like regex is needed for the second challenge, did not think about german dictionary, is not going to be easy. Nice link! Nice link 2! Need to try to understand how does regex exactly works and adapt to my needs. We found a good regex that works 7/9 of the times (all streets but Calle 39 No 1540) , we are going to try another kind of process to parse streets. \"^(\\b\\D+\\b)?\\s*(\\b.*?\\d.*?\\b)\\s*(\\b\\D+\\b)?$\" We achieve to parse the last street using: (.*?)\\s*(\\d+(?:[/-]\\d+)?)?$ We found an state-of-the-art library for parsing multinational street addresses using deep learning , let's see how it works. We read again the challenge statement and as we where blocked with 8/9 parsed streets, we decide to start using TDD and use as many python best practices as we can, incorporating the following concepts: Start developing following TDD, this is, start using automated unit tests to drive the development of our code. Add code formatting frameworks such as Black, Flake8 and Isort and automatizing code format checks whenever a commit was done. Add Makefile so it simplifies code running, testing and formatting no matter what IDE is being used. Add docs folder and organizing better documentation. Also adding testing and coverage reports into the documentation. Faced problems Multiple SSH keys on same machine To clone and interact with another github account, just create a new ssh-key: ssh-keygen -t rsa Save it on /home/jon/.ssh/ with a different name if one already exists. ssh-add ~/.ssh/<new_private_key_file> Copy public key and paste on Github>Settings>SSH and GPG keys Add configuration on /home/jon/.ssh/config Host <alias_name> Hostname github.com User git IdentityFile ~/.ssh/<new_private_key_file> IdentitiesOnly yes Finally clone repository with git clone <alias_name>:<github_name>/<proyect_name>.git REGEX We need to learn what was regex from the very beginning, we find some useful websites as that given a regex explain what was deifning each character. Deepparse We try a pre-trained machine learning classification method to see if we get better results than with the regex method, we need to understand how to extract data from the output returned by the model and which models where available using the library and which one was better for this purpose. As if we were not worried about cpu limitations we used 'best' model. {bibliography} author = {Marouane Yassine and David Beauchemin}, title = {{Deepparse: A State-Of-The-Art Deep Learning Multinational Addresses Parser}}, year = {2020}, note = [url](https://deepparse.org) Testing We discovered helpful documentation about python testing. We about fixtures as we are not used to make tests. Although we knew about TDD methodology. Also, we modify the output of tests from a boolean type to a comparison between actual processed streets and expected streets, as a boolean gives no information about which streets are well parsed and which not. We did not find out a good library for asserting json lists so we convert them into python lists first and so we could make use of unittest TestCase library. Pipenv Somehow, pipenv run commands was not working, giving us the following error: Traceback (most recent call last): File \"/usr/bin/pipenv\", line 11, in <module> load_entry_point('pipenv==11.9.0', 'console_scripts', 'pipenv')() File \"/usr/lib/python3/dist-packages/pipenv/vendor/click/core.py\", line 722, in __call__ return self.main(*args, **kwargs) File \"/usr/lib/python3/dist-packages/pipenv/vendor/click/core.py\", line 697, in main rv = self.invoke(ctx) File \"/usr/lib/python3/dist-packages/pipenv/vendor/click/core.py\", line 1066, in invoke return _process_result(sub_ctx.command.invoke(sub_ctx)) File \"/usr/lib/python3/dist-packages/pipenv/vendor/click/core.py\", line 895, in invoke return ctx.invoke(self.callback, **ctx.params) File \"/usr/lib/python3/dist-packages/pipenv/vendor/click/core.py\", line 535, in invoke return callback(*args, **kwargs) File \"/usr/lib/python3/dist-packages/pipenv/cli.py\", line 602, in run core.do_run(command=command, args=args, three=three, python=python) File \"/usr/lib/python3/dist-packages/pipenv/core.py\", line 2200, in do_run command = ' '.join(project.scripts[command]) File \"/usr/lib/python3/dist-packages/pipenv/project.py\", line 374, in scripts scripts[k] = shlex.split(v, posix=True) File \"/usr/lib/python3.8/shlex.py\", line 311, in split return list(lex) File \"/usr/lib/python3.8/shlex.py\", line 300, in __next__ token = self.get_token() File \"/usr/lib/python3.8/shlex.py\", line 109, in get_token raw = self.read_token() File \"/usr/lib/python3.8/shlex.py\", line 140, in read_token nextchar = self.instream.read(1) AttributeError: 'list' object has no attribute 'read' We fix it reinstalling pipenv: sudo apt-get remove pipenv pip3 install pipenv ## Flake8 Makes the following warning: ./app/services/middle_processor.py:14:39: W605 invalid escape sequence '\\d' It seems that Python 3 interprets string literals as Unicode strings, and therefore our \\d is treated as an escaped Unicode character. As we are following Flake8 rules regarding W605 to avoid the warning we add --ignore flag when checking flake8 format: check-flake8 = \"python -m flake8 --exclude=.venv/ --ignore=W605\" Even so, a warning is raised when we run tests with pytest.","title":"Technical documentation"},{"location":"technical/index.html#modus-operandi","text":"Read statement Free thinking: First challenge looks easy, thinking about split() / strip(). Second challenge also easy, read until a numeric is found. Third challenge looks like it needs another field such as postal code or an IA app to identify the country so as to know how to split streets or maybe an IA that learns how to split streets. Do I need a country, street and number database to cover all cases? Looks like regex is needed for the second challenge, did not think about german dictionary, is not going to be easy. Nice link! Nice link 2! Need to try to understand how does regex exactly works and adapt to my needs. We found a good regex that works 7/9 of the times (all streets but Calle 39 No 1540) , we are going to try another kind of process to parse streets. \"^(\\b\\D+\\b)?\\s*(\\b.*?\\d.*?\\b)\\s*(\\b\\D+\\b)?$\" We achieve to parse the last street using: (.*?)\\s*(\\d+(?:[/-]\\d+)?)?$ We found an state-of-the-art library for parsing multinational street addresses using deep learning , let's see how it works. We read again the challenge statement and as we where blocked with 8/9 parsed streets, we decide to start using TDD and use as many python best practices as we can, incorporating the following concepts: Start developing following TDD, this is, start using automated unit tests to drive the development of our code. Add code formatting frameworks such as Black, Flake8 and Isort and automatizing code format checks whenever a commit was done. Add Makefile so it simplifies code running, testing and formatting no matter what IDE is being used. Add docs folder and organizing better documentation. Also adding testing and coverage reports into the documentation.","title":"Modus operandi"},{"location":"technical/index.html#faced-problems","text":"","title":"Faced problems"},{"location":"technical/index.html#multiple-ssh-keys-on-same-machine","text":"To clone and interact with another github account, just create a new ssh-key: ssh-keygen -t rsa Save it on /home/jon/.ssh/ with a different name if one already exists. ssh-add ~/.ssh/<new_private_key_file> Copy public key and paste on Github>Settings>SSH and GPG keys Add configuration on /home/jon/.ssh/config Host <alias_name> Hostname github.com User git IdentityFile ~/.ssh/<new_private_key_file> IdentitiesOnly yes Finally clone repository with git clone <alias_name>:<github_name>/<proyect_name>.git","title":"Multiple SSH keys on same machine"},{"location":"technical/index.html#regex","text":"We need to learn what was regex from the very beginning, we find some useful websites as that given a regex explain what was deifning each character.","title":"REGEX"},{"location":"technical/index.html#deepparse","text":"We try a pre-trained machine learning classification method to see if we get better results than with the regex method, we need to understand how to extract data from the output returned by the model and which models where available using the library and which one was better for this purpose. As if we were not worried about cpu limitations we used 'best' model. {bibliography} author = {Marouane Yassine and David Beauchemin}, title = {{Deepparse: A State-Of-The-Art Deep Learning Multinational Addresses Parser}}, year = {2020}, note = [url](https://deepparse.org)","title":"Deepparse"},{"location":"technical/index.html#testing","text":"We discovered helpful documentation about python testing. We about fixtures as we are not used to make tests. Although we knew about TDD methodology. Also, we modify the output of tests from a boolean type to a comparison between actual processed streets and expected streets, as a boolean gives no information about which streets are well parsed and which not. We did not find out a good library for asserting json lists so we convert them into python lists first and so we could make use of unittest TestCase library.","title":"Testing"},{"location":"technical/index.html#pipenv","text":"Somehow, pipenv run commands was not working, giving us the following error: Traceback (most recent call last): File \"/usr/bin/pipenv\", line 11, in <module> load_entry_point('pipenv==11.9.0', 'console_scripts', 'pipenv')() File \"/usr/lib/python3/dist-packages/pipenv/vendor/click/core.py\", line 722, in __call__ return self.main(*args, **kwargs) File \"/usr/lib/python3/dist-packages/pipenv/vendor/click/core.py\", line 697, in main rv = self.invoke(ctx) File \"/usr/lib/python3/dist-packages/pipenv/vendor/click/core.py\", line 1066, in invoke return _process_result(sub_ctx.command.invoke(sub_ctx)) File \"/usr/lib/python3/dist-packages/pipenv/vendor/click/core.py\", line 895, in invoke return ctx.invoke(self.callback, **ctx.params) File \"/usr/lib/python3/dist-packages/pipenv/vendor/click/core.py\", line 535, in invoke return callback(*args, **kwargs) File \"/usr/lib/python3/dist-packages/pipenv/cli.py\", line 602, in run core.do_run(command=command, args=args, three=three, python=python) File \"/usr/lib/python3/dist-packages/pipenv/core.py\", line 2200, in do_run command = ' '.join(project.scripts[command]) File \"/usr/lib/python3/dist-packages/pipenv/project.py\", line 374, in scripts scripts[k] = shlex.split(v, posix=True) File \"/usr/lib/python3.8/shlex.py\", line 311, in split return list(lex) File \"/usr/lib/python3.8/shlex.py\", line 300, in __next__ token = self.get_token() File \"/usr/lib/python3.8/shlex.py\", line 109, in get_token raw = self.read_token() File \"/usr/lib/python3.8/shlex.py\", line 140, in read_token nextchar = self.instream.read(1) AttributeError: 'list' object has no attribute 'read' We fix it reinstalling pipenv: sudo apt-get remove pipenv pip3 install pipenv ## Flake8 Makes the following warning: ./app/services/middle_processor.py:14:39: W605 invalid escape sequence '\\d' It seems that Python 3 interprets string literals as Unicode strings, and therefore our \\d is treated as an escaped Unicode character. As we are following Flake8 rules regarding W605 to avoid the warning we add --ignore flag when checking flake8 format: check-flake8 = \"python -m flake8 --exclude=.venv/ --ignore=W605\" Even so, a warning is raised when we run tests with pytest.","title":"Pipenv"}]}